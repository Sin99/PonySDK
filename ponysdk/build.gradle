ext {
    resourcesCoreTest = "src/test/resources"
    gwtOutputDirName = buildDir.name + "/gwt"
    buildInfoOutputDirName = buildDir.name + "/buildinfo"
    javadocResources = "src/main/javadoc"
    jettyVersion = '9.4.0.v20161208'
    gwtVersion = '2.8.0'
}

configurations {
    xjc
    gwtdev
}

dependencies {
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.4'

    gwtdev 'com.google.gwt:gwt-dev:' + gwtVersion

    compile('javax.validation:validation-api:1.0.0.GA') {
        artifact {
            name = 'validation-api'
            type = 'jar'
        }
        artifact {
            name = 'validation-api'
            type = 'jar'
            classifier = 'sources'
        }
    }

    compile 'com.google.gwt:gwt-user:' + gwtVersion
    compile 'com.google.gwt:gwt-elemental:' + gwtVersion
    compile 'com.google.jsinterop:jsinterop:1.0.1'
    compile 'com.google.jsinterop:jsinterop-annotations:1.0.1'

    compile 'org.springframework:spring-core:4.2.3.RELEASE'
    compile 'org.springframework:spring-web:4.2.3.RELEASE'
    compile 'org.springframework:spring-beans:4.2.3.RELEASE'
    compile 'org.springframework:spring-context:4.2.3.RELEASE'

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:log4j-over-slf4j:1.7.12'
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'org.slf4j:jcl-over-slf4j:1.7.12'

    compile 'org.eclipse.jetty:jetty-server:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-servlet:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-webapp:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-servlets:' + jettyVersion
    compile 'org.eclipse.jetty.websocket:websocket-api:' + jettyVersion
    compile 'org.eclipse.jetty.websocket:websocket-common:' + jettyVersion
    compile 'org.eclipse.jetty.websocket:websocket-server:' + jettyVersion
    compile 'org.eclipse.jetty.websocket:websocket-servlet:' + jettyVersion
    compile 'org.eclipse.jetty.websocket:javax-websocket-server-impl:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-client:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-io:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-util:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-http:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-security:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-continuation:' + jettyVersion

    compile 'org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0'
    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'javax.json:javax.json-api:1.0'
    compile 'org.glassfish:javax.json:1.0.4'

    testCompile 'org.seleniumhq.selenium:selenium-java:2.33.0'
    testCompile 'junit:junit:4.10'
    testCompile 'org.mockito:mockito-all:1.10.19'

    runtime 'com.google.gwt:gwt-codeserver:2.8.0'
}

jar {
    baseName = 'ponysdk'
    into('ponyterminal') {
        from gwtOutputDirName + '/ponyterminal'
    }
    into('ponyterminaldebug') {
        from gwtOutputDirName + '/ponyterminaldebug'
    }

    exclude('*.devmode.js')
    exclude('*compilation-mappings.txt')

    manifest {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = (int) (new Date().getTime() / 1000)

        attributes("Manifest-Version": "1.0")
        attributes("Created-By": "PonySDK")
        attributes("Built-By": "PonySDK")
        attributes("License-Title": "Apache License 2.0")
        attributes("Specification-Title": "PonySDK")
        attributes("Specification-Version": version)
        attributes("Specification-Vendor": "PonySDK")
        attributes("Implementation-Title": "PonySDK")
        attributes("Implementation-Version": version)
        attributes("Implementation-Vendor-Id": "com.ponysdk")
        attributes("Implementation-Vendor": "PonySDK")
        attributes("Revision": revision)
        attributes("Date": timestamp + " / " + new Date().toGMTString())
    }
}

task gwtc(dependsOn: classes, type: JavaExec) {
    inputs.files fileTree('src/main/java/com/ponysdk/core/terminal')
    outputs.files fileTree(gwtOutputDirName)
    description = "GWT compile to JavaScript (production mode)"
    main = 'com.google.gwt.dev.Compiler'
    workingDir = buildDir

    classpath {
        [
                sourceSets.main.java.srcDirs,
                configurations.compile,
                configurations.gwtdev
        ]
    }

    args = [
            '-war',
            'gwt',
            '-localWorkers',
            Runtime.getRuntime().availableProcessors(),
            'com.ponysdk.core.PonyTerminal',
            '-generateJsInteropExports'
            //'-style', 'DETAILED',
            //'-optimize', '0'
    ]

    maxHeapSize = '512M'
}

task gwtcDebug(dependsOn: classes, type: JavaExec) {
    inputs.files fileTree('src/main/java/com/ponysdk/core/terminal')
    outputs.files fileTree(gwtOutputDirName)
    description = "GWT compile to JavaScript (production mode)"
    main = 'com.google.gwt.dev.Compiler'
    workingDir = buildDir

    classpath {
        [
                sourceSets.main.java.srcDirs,
                configurations.compile,
                configurations.gwtdev
        ]
    }

    args = [
            '-war',
            'gwt',
            '-localWorkers',
            Runtime.getRuntime().availableProcessors(),
            'com.ponysdk.core.PonyTerminalDebug',
            '-generateJsInteropExports',
            '-style', 'DETAILED',
            '-optimize', '0'
    ]

    maxHeapSize = '512M'
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.test.allJava

    from(sourceSets.main.java.srcDirs) {
        include '**/*.xml'
    }

    manifest {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()
        ext.timestamp = (int) (new Date().getTime() / 1000)

        attributes("Manifest-Version": "1.0")
        attributes("Created-By": "PonySDK")
        attributes("Built-By": "PonySDK")
        attributes("License-Title": "Apache License 2.0")
        attributes("Specification-Title": "PonySDK")
        attributes("Specification-Version": version)
        attributes("Specification-Vendor": "PonySDK")
        attributes("Implementation-Title": "PonySDK")
        attributes("Implementation-Version": version)
        attributes("Implementation-Vendor-Id": "com.ponysdk")
        attributes("Implementation-Vendor": "PonySDK")
        attributes("Revision": revision)
        attributes("Classifier": "sources")
        attributes("Date": timestamp + " / " + new Date().toGMTString())
    }
}

test {
    classpath = files(resourcesCoreTest, gwtOutputDirName) + classpath
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

artifacts {
    archives sourcesJar
}

jar.dependsOn('gwtc')
jar.dependsOn('gwtcDebug')
